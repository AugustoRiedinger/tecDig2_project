#+TITLE: Sistema de adquisición de datos y lógica digital base para implementación en CubeSats
#+AUTHOR: A. Riedinger & G. Garcia
#+PROPERTY: header-args :tangle src/main.c

* Índice :toc:
- [[#sobre-el-proyecto][Sobre el proyecto:]]
- [[#satdac][SATDAC:]]
  - [[#librerias-utilizadas][Librerias utilizadas:]]
  - [[#estructuras][Estructuras:]]
  - [[#definición-de-constantes][Definición de constantes:]]
  - [[#main][Main:]]

* Sobre el proyecto:

El objetivo del proyecto es construir la base lógica digital inicial, como *prueba de concepto*, para aplicación en un CubeSat.

CubeSat es un estándar de diseño de nanosatélites, cuya estructura es escalable en cubos de 10 cm de arista y masa inferior a 1,33 kg. La premisa de este trabajo se basa en el diseño de un sistema de adquisición y transmisión de datos según el MCU STM32F4-BlackPill y en una estación de recepción de datos y transmisión de comandos según el MCU STM32F429ZI.

Esto es, el proyecto se divide en dos sistemas que trabajan de forma codependiente pero que son controlados por microcontroladores distintos:

 + Uno es el SATDAC (Sistema de Adquisicón y Transmisión de Datos Autosuficiente y Controlable), que estaría ubicado dentro del hipotético CubeSat.
 + Otro es el ERDYTC (Estación de Recepción de Datos Y Transmisión de Comandos), que se encontraría fuera del CubeSat.

El SATDAC posee las siguientes capacidades:

 + Sensado de temperatura.
 + Control y despliegue de periféricos por comando.
 + Recepción y transmisión de datos por RF.

Y la ERDYTC las siguientes:

 + Capacidad para mostrar datos recibidos y estados en LCD.
 + Ingreso de comandos por usuario y transmisión de los mismos.
 + Almacenamiento en memoria externa.
 + Recepción y transmisión de datos por RF.
* SATDAC:

Aquí realizar una descripción más detallada del SATDAC, poner fotos de placas, prototipo físico terminado, etc.

** Librerias utilizadas:

Aquí se muestran las librerías utilizadas en el diseño del sistema.

 + Librería estándar, con las funciones y códigos básicos para microcontroladores STM32F4XX:

#+begin_src C
#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stdio.h"
#include "misc.h"
#+end_src

 + Librería para el control del CLOCK del MCU:

#+begin_src C
#include "stm32f4xx_rcc.h"
#+end_src

 + Librería para el control de pines analógicos:

#+begin_src C
#include "stm32f4xx_adc.h"
#+end_src

 + Librería para el control de TIMERS:

#+begin_src C
#include "stm32f4xx_tim.h"
#+end_src

 + Libería para habilitar funciones matemáticas, como /pow()/:

#+begin_src C
#include "math.h"
#+end_src
** Estructuras:

En esta sección se declaran las diferentes estructuras utilizadas para la configuración de pines del MCU.

*** General:

La siguiente es la estructura para configuración de pines como salidas digitales:

#+begin_src C
GPIO_InitTypeDef    GPIO_InitStructure;
#+end_src

La siguiente es la estructura para la configuración y habilitación de interrupciones (por vencimiento de cuenta de TIMER, por DMA, etc.):

#+begin_src C
NVIC_InitTypeDef    NVIC_InitStructure;
#+end_src

La siguiente estructura se utiliza para configurar interrupciones externas; principalmente utilizada para interrupir según el estado de una entrada digital (pulsador, etc.):

#+begin_src C
EXTI_InitTypeDef   EXTI_InitStructure;
#+end_src

*** ADC:

Se definen las estructuras para inicializar pines como convertores analógico/digital:

#+begin_src C
ADC_InitTypeDef         ADC_InitStructure;
ADC_CommonInitTypeDef   ADC_CommonInitStructure;
#+end_src
*** TIMERS:

Las siguientes estructuras se utilizan en la configuración de TIMERS del MCU:

#+begin_src C
TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
TIM_OCInitTypeDef       TIM_OCInitStructure;
#+end_src

*** DMA:

La siguiente estructura se utiliza en la configuración y habilitación de la funcionalidad de DMA (/Acceso Directo a Memoria/):

#+begin_src C
DMA_InitTypeDef     DMA_InitStructure;
#+end_src

** Definición de constantes:
En esta sección se definen constantes a utilizar en el resto del código.

*** Control del servomotor:

** Main:

#+begin_src C
int main(void)
{
  while (1)
  {
  }
}
#+end_src
